name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    if: |
      contains(github.event.head_commit.message, '[release]') || 
      contains(github.event.head_commit.message, '[release:minor]') || 
      contains(github.event.head_commit.message, '[release:major]')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git user
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Get current version
        id: current_version
        run: |
          version=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[release:major]"* ]]; then
            cargo set-version --bump major
          elif [[ "${{ github.event.head_commit.message }}" == *"[release:minor]"* ]]; then
            cargo set-version --bump minor
          else
            cargo set-version --bump patch
          fi
          new_version=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date +%Y-%m-%d)
          RELEASE_TYPE=""
          if [[ "${{ github.event.head_commit.message }}" == *"[release:major]"* ]]; then
            RELEASE_TYPE="### ðŸ’¥ Major Release"
          elif [[ "${{ github.event.head_commit.message }}" == *"[release:minor]"* ]]; then
            RELEASE_TYPE="### âœ¨ Minor Release"
          else
            RELEASE_TYPE="### ðŸ”§ Patch Release"
          fi
          
          NEW_CONTENT="## [${{ env.NEW_VERSION }}] - $DATE\n$RELEASE_TYPE"
          sed -i "s/## \[.*-SNAPSHOT\].*/$NEW_CONTENT/" CHANGELOG.md

      - name: Commit and Tag Release
        run: |
          git add Cargo.toml Cargo.lock CHANGELOG.md
          git commit -m "chore: release version ${{ env.NEW_VERSION }} [skip ci]"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version ${{ env.NEW_VERSION }}"
          git push origin main --tags

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.NEW_VERSION }}" \
            --title "Release v${{ env.NEW_VERSION }}" \
            --generate-notes

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase repository name
        run: |
          echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LOWER }}:latest
            ghcr.io/${{ env.REPO_LOWER }}:v${{ env.NEW_VERSION }}
          labels: |
            org.opencontainers.image.version=${{ env.NEW_VERSION }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Set next snapshot version
        run: |
          # Get the current version components
          IFS='.' read -r major minor patch <<< "${{ env.NEW_VERSION }}"
          
          # Increment patch version and add SNAPSHOT suffix
          next_version="${major}.${minor}.$((patch + 1))-SNAPSHOT"
          
          # Update version in Cargo.toml
          cargo set-version "${next_version}"
          
          NEW_SNAPSHOT="## [${next_version}] - Unreleased\n### Added\n- N/A\n\n### Changed\n- N/A\n\n### Fixed\n- N/A"

          # Update CHANGELOG.md with new snapshot version
          sed -i "/^# Changelog/a \\\n${NEW_SNAPSHOT}" CHANGELOG.md
          
          # Commit changes
          git add Cargo.toml Cargo.lock CHANGELOG.md
          git commit -m "chore: prepare for next development iteration [skip ci]"
          git push origin main
